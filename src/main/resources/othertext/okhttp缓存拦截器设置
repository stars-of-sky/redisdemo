okhttp的缓存由返回的header 来决定。如果服务器支持缓存的话返回的headers里面会有这一句

”Cache-Control”，“max-age=time”
这里的time是一个单位为秒的时间长度。意思是缓存的时效，比如要设置这个API的缓存时效为一天

返回的header就应该是

”Cache-Control”，“max-age=3600*24”
不巧。公司的服务器不支持缓存的，怎么看出来的？因为我们的返回的headers是包含这些的
"Cache-Control" 、max-age=xxx 这些Key

但我们又想用缓存，这个时候怎么办呢。，得益于okhttp的Interceptor机制，一切的配置都可以变得那么简单优雅。

我们可以在拦截器里截获headers然后移除默认的Cache-Control

但是我们知道有些API返回的数据适合缓存，而有些是不适合的，比如资讯列表，各种更新频率比较高的，是不可以缓存的，而像资讯详情这种数据是可以缓存的。所以我们不能直接统一写死。需要动态配置。

同样的，我们也在header里面作文章，自定义一个header。注意这个header一定不能被其他地方使用，不然会被覆盖值。这里我们定义的header的key名字为：Cache-Time。我们在拦截器里去取这个header。如果取得了不为空的值，说明这个请求是要支持缓存的，缓存的时间就是Cache-Time对应的值。我们把他添加进去。

自定义缓存Interceptor

public class CacheInterceptor implements Interceptor {
    @Override
    public Response intercept(Chain chain) throws IOException {
        Request request = chain.request();
        Response response = chain.proceed(request);
        String cache = request.header("Cache-Time");
        if (!Util.checkNULL(cache)) {//缓存时间不为空
            Response response1 = response.newBuilder()
                    .removeHeader("Pragma")
                    .removeHeader("Cache-Control")
                    //cache for cache seconds
                    .header("Cache-Control", "max-age="+cache)
                    .build();
            return response1;
        } else {
            return response;
        }
    }
}
缓存拦截器定义好了，我们还需要配置缓存的路径。这里我们定义一个缓存的内容提供器（也可以直接在Builder中设置）

public class CacheProvide {
    Context mContext;

    public CacheProvide(Context context) {
        mContext = context;
    }

    public Cache provideCache() {//使用应用缓存文件路径，缓存大小为10MB
        return new Cache(mContext.getCacheDir(), 10240 * 1024);
    }
}
通过上面的代码我们可以看到我们指定了缓存的大小为10MB。这里如果缓存的数据量大于这个值，内部会使用lur规则进行删除。

下面我们开始配置OkHttpClient

 OkHttpClient client = new OkHttpClient.Builder()
                    .addNetworkInterceptor(new CacheInterceptor())//缓存拦截器
                    .cache(new CacheProvide(mAppliactionContext).provideCache())//缓存空间提供器
                    .connectTimeout(8, TimeUnit.SECONDS)
                    .readTimeout(5, TimeUnit.SECONDS)
                    .writeTimeout(5, TimeUnit.SECONDS)
                    .build();
好了，现在我们如果哪里需要缓存数据的话，只要在请求里添加header（“Cache-Time”，“3600*24”）就可以把当前数据缓存一天啦

https://blog.csdn.net/qq_33463102/article/details/60869879
上面这种情况是不管有没有网络，都先读缓存，缓存时间为“Cache-Time”设定的时间;
--------------------------------------------------------------------------
接下来还有一种情况，离线时，可以获取缓存，在线时获取最新数据。

主要是对拦截器的设置，这里要使用Interceptor。

Interceptor interceptor = new Interceptor() {
        @Override
    public Response intercept(Chain chain) throws IOException {
        Request request = chain.request();
   	if (!isNetworkAvailable(TradeApplication.getContextObject())) 
            request = request.newBuilder()
                     .cacheControl(CacheControl.FORCE_CACHE)
                     .build();
            LogCat.i("no network");
         }
	Response response = chain.proceed(request);
	if (isNetworkAvailable(TradeApplication.getContextObject())) {
                int maxAge = 0 * 60; // 有网络时 设置缓存超时时间为0;
                
                response.newBuilder()
                        .header("Cache-Control", "public, max-age=" + maxAge)
                        .removeHeader("Pragma")// 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效
                        .build();
         } else {
                int maxStale = 60 * 60 * 24; // 无网络时，设置超时为1天
                LogCat.i("has maxStale="+maxStale);
                response.newBuilder()
                        .header("Cache-Control", "public, only-if-cached, max-stale=" + maxStale)
                        .removeHeader("Pragma")
                        .build();
            }
            return response; 
    };
上面缓存的设置主要是通过拦截器来实现的，但是在实际开发中，基本上都是使用一个okhttpclient去进行网络访问的，因此只有一个缓存文件访问入口，但是实际需求中，
往往都是有的接口需要进行缓存，有的接口需要获得最新数据。因此okhttp官方文档建议用CacheControl这个类来进行缓存策略的制定。

